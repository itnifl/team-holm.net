<p class="blogheader" style="margin-bottom:2px;"><A NAME="VMWareUSBInst"><u>ESXi Scripted USB Install</u></A></p>
<p class="smaller">-31st of December 2015</p>
<hr/>
<br/>
This article will contain a technical description of creating, and auto-creating scripted ESXi installs from USB. The USB drive we will be using for the install will be partitioned into three partitions labeled <b>INSTALL</b>, <b>CONFIG</b> and <b>SETUP</b>. 
<h4>Getting started</h4>

The first partition (<b>INSTALL</b>) will be a FAT32 partition and contain the ESXi installer files, the scripts to automate the installer, syslinux bootloader and a tftp client to download configuration we need to automatically set up our ESXi host.
The second parttion (<b>CONFIG</b>) will be a FAT16 partition that contains patches that we will use to patch our installation automatically, log files from the installation will be stored here, and a configuration file downloaded from our TFTP server will be placed here.
The third and last partition (<b>SETUP</b>) will be a NTFS partition that will contain any script files or setup installers that we might need for later usage when working with our ESXi server that we have auto-installed.
<br/><br/>
The setup procdure will be described as performed in Linux, by using BASH scripts. This can also be done in Windows, but will require other technical expertise to acquire this, and is not described here.
<br/>
<h2>1. Downloading the TFTP client source code and compiling it for use </h2>
	<table width="100%">
		<tr>
			<td style="background-color:white;">
				To make our TFTP client work in an ESXi environment, we need to compile it statically in an OS environment that is as similar to an ESXi as we can get it. 
				Even though ESXi is not Linux, the closest we will get is with Centos 6.x. In this example we will use Centos 6.7 for i386 architecture for compiling the code. Compiling the code statically makes linked libraries included
				in the compiled result, which makes us able to run the compiled code on the ESXi even if a needed code library might be missing there. This is true to a certain degree. Some TFTP clients depend heavily on 
				code frameworks and other libraries, that don't get included in the compiled code even when we compile the code statically. This is why we want to find a light-weight TFTP client that depends mostly on its own code
				and uses only standard C-libraries as much as possible. In the search of such an client, I have picked a <a href="https://github.com/lanrat/tftp" class="articleLink" target="_blank">TFTP client</a> writte by Ian Foster. 
				To improve the client as I wanted, I rewrote it as shown <a href="https://github.com/itnifl/TFTP-client" class="articleLink" target="_blank">here.</a> The improvements made to the client are described in the readme and the comments in the code.
				Clone the code from Ian Foster, and replace tftpclient.c with my altered code <a href="https://github.com/itnifl/TFTP-client" class="articleLink" target="_blank">found here.</a><br/>
				<br/>
				After installing and setting up Cento 6.x and downloading the TFTP client code on to it, you will need to install the builder tools needed to compile the TFTP client:<br/>
				<pre class="brush: bash;">
					yum install build-essential gcc make
				</pre>
				Then head on over to the folder where you have placed the TFTP source code and compile it:<br/>
				<pre class="brush: bash;">
					make CFLAGS="-static" EXEEXT="-static"
				</pre>
				Now you will have the compiled tftpclient (a file without a filename extension) in the same folder as where you  compiled the code. We now need to create a compressed tar ball and convert that into a t00 file that we will include in the ESXi installer to be installed with the rest of the system. Please see a example script below. read through it, it contains more actions then you possibly might need. I keep these here  for inspiration of possible technical solutions.<br/>
				<pre class="brush: bash;">
					#! /bin/bash

					mkdir -p /tmp/ovf/files
					mkdir -p /tmp/ovf/tools
					mkdir -p /tmp/ovf/bin
					mkdir -p /tmp/ovf/bin/tftp
					
					rm -rf /tmp/tftp
					mkdir -p /tmp/tftp
					cd /tmp/tftp
					#We have our compiled TFTP code in tftp-compiled.tar.gz, copy it here:
					cp /usr/arbitrarylocation/tftp-compiled.tar.gz .
					tar xzvf tftp-compiled.tar.gz
					rsync -au /tmp/tftp/* /tmp/ovf/bin/tftp/
					
					#We are including ovf-tool with our ESXi installer:
					rsync -au /usr/lib/vmware-ovftool/* /tmp/ovf/tools/
					sed -i 's/bash/sh/' /tmp/ovf/tools/ovftool
					
					#We are including a private and public key for use with automatic SSH authentication:
					cp /usr/arbitrarylocation/deployment_rsa /tmp/ovf/files/deployment_rsa
					cp /usr/arbitrarylocation/esxi/deployment_rsa.pub /tmp/ovf/files/deployment_rsa.pub

					#Now create the t00 file:
					cd /tmp
					tar cf ovf.tar ovf
					gzip -9 ovf.tar
					mv ovf.tar.gz /mnt/usb/ovf-00.t00
					chmod 777 /mnt/usb/ovf-00.t00
				</pre>
				Here /mnt/usb/ovf-00.t00 is the file we are going to include in our VMware ESXi installer. We will copy that file to the <b>INSTALL</b> partition that we will make, and refer to it via boot.cfg. This same file lso refers to ks.cfg, which will be our kickstart installer script to setup the ESXi.

			</td>
		</tr>
	</table>
<h2>2. Partitioning the disk and installing syslinux on the INSTALL(boot) partition</h2>
	<table width="100%">
		<tr>
			<td style="background-color:white;">
				This section will be written later.	<br/>
				Check by later on.			
			</td>
		</tr>
	</table>
<h2>3. Set up scripts and configuration files for an automated bootable installation</h2>
	<table width="100%">
		<tr>
			<td style="background-color:white;">
				This section will be written later.	<br/>
				Will update the site index when done.
			</td>
		</tr>
	</table>
<h2>4. Copy in any tools needed to the SETUP partition</h2>
	<table width="100%">
		<tr>
			<td style="background-color:white;">
				This section will be written later.	<br/>
				Check by.
			</td>
		</tr>
	</table>
	<br/>
	All these sections will sum up a automativ USB based deployment. Please comment your experiences below.
	<br/>
	<i><b><u>Source</u>: VMware and the internet abroad.</b></i>
	</p>
</p>